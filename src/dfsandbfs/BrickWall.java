package dfsandbfs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和相等。
 * 你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。
 * 给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。
 * 你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 。
 * @author Dreihunde
 *
 */
public class BrickWall {
	//method 1 哈希表 穿过砖墙最少=height - 穿过砖边最多
    public int leastBricks(List<List<Integer>> wall) {
        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();
        for (List<Integer> widths : wall) {
            int n = widths.size();
            int sum = 0;
            for (int i = 0; i < n - 1; i++) {
                sum += widths.get(i);
                //横坐标存在就+1，否则新建
                cnt.put(sum, cnt.getOrDefault(sum, 0) + 1);
            }
        }
        int maxCnt = 0;
        for (Map.Entry<Integer, Integer> entry : cnt.entrySet()) {
            maxCnt = Math.max(maxCnt, entry.getValue());
        }
        return wall.size() - maxCnt;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<List<Integer>> wall = new ArrayList<>();
		wall.add(new ArrayList<Integer>(Arrays.asList(1, 2, 2, 1)));
		wall.add(new ArrayList<Integer>(Arrays.asList(3, 1, 2)));
		wall.add(new ArrayList<Integer>(Arrays.asList(1, 3, 2)));
		wall.add(new ArrayList<Integer>(Arrays.asList(2, 4)));
		wall.add(new ArrayList<Integer>(Arrays.asList(3, 1, 2)));
		wall.add(new ArrayList<Integer>(Arrays.asList(1, 3, 1, 1)));
		
		BrickWall bk = new BrickWall();
		long startTime = System.nanoTime();
		System.out.println(bk.leastBricks(wall));
		long endTime = System.nanoTime();
		System.out.println("time cost:" + (endTime - startTime)/1000 + "ms");
	}

}
