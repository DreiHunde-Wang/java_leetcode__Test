package src.numsubsum;

/**
 * Áªô‰Ω†‰∏?‰∏™Êï∞ÁªÑ¬†numsÔºåÊàë‰ª¨ÂèØ‰ª•Â∞ÜÂÆÉÊåâ‰∏?‰∏™ÈùûË¥üÊï¥Êï? k ËøõË°åËΩÆË∞ÉÔº?
 * ËøôÊ†∑ÂèØ‰ª•‰ΩøÊï∞ÁªÑÂèò‰∏∫¬†[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]¬†ÁöÑÂΩ¢Âºè„?ÇÊ≠§ÂêéÔºå‰ªª‰ΩïÂÄºÂ∞è‰∫éÊàñÁ≠â‰∫éÂÖ∂Á¥¢ÂºïÁöÑÈ°πÈÉΩÂèØ‰ª•ËÆ∞‰Ωú‰∏?ÂàÜ„??
 * ‰æãÂ¶ÇÔºåÊï∞ÁªÑ‰∏∫¬†nums = [2,4,1,3,0]ÔºåÊàë‰ª¨Êåâ¬†k = 2¬†ËøõË°åËΩÆË∞ÉÂêéÔºåÂÆÉÂ∞ÜÂèòÊàê¬†[1,3,0,2,4]„Ä?
 * ËøôÂ∞ÜËÆ∞‰∏∫ 3 ÂàÜÔºåÂõ†‰∏∫ 1 > 0 [‰∏çËÆ°ÂàÜ]„Ä?3 > 1 [‰∏çËÆ°ÂàÜ]„Ä?0 <= 2 [ËÆ? 1 ÂàÜ]„Ä?
 * 2 <= 3 [ËÆ? 1 ÂàÜ]Ôº?4 <= 4 [ËÆ? 1 ÂàÜ]„Ä?
 * Âú®ÊâÄÊúâÂèØËÉΩÁöÑËΩÆË∞É‰∏≠ÔºåËøîÂõûÊàë‰ª¨Êâ?ËÉΩÂæóÂà∞ÁöÑÊú?È´òÂàÜÊï∞ÂØπÂ∫îÁöÑËΩÆË∞É‰∏ãÊ†á k „ÄÇÂ¶ÇÊûúÊúâÂ§ö‰∏™Á≠îÊ°àÔºåËøîÂõûÊª°Ë∂≥Êù°‰ª∂ÁöÑÊú?Â∞èÁöÑ‰∏ãÊ†á k „Ä?
 * ÈìæÊé•Ôºöhttps://leetcode-cn.com/problems/smallest-rotation-with-highest-score
 * @author Dreihunde
 *
 */
public class BestRotation {
	//method 1 Êö¥Âäõ O(n^2) O(1)
    public int bestRotation1(int[] nums) {
        int n = nums.length;
        int score = 0;
        int index = 0;
        for (int i = 0; i < n; i++) {
            int tScore = getRotationScore(nums, i);
            if (tScore > score) {
                score = tScore;
                index = i;
            }
        }
        return index;
    }

    private int getRotationScore(int[] nums, int k) {
        int n = nums.length;
        int lt = 0;
        int rt = k;
        int score = 0;
        while (lt < n) {
            if (rt == n) {
                rt = 0;
            }
            if (nums[rt] <= lt) {
                score++;
            }
            rt++;
            lt++;
        }
        return score;
    }

    //method 2 Â∑ÆÂàÜ O(n) O(n)
    //i‚à?(n‚à?1)‚©Ωk‚©Ωi‚àínums[i]
    public int bestRotation(int[] nums) {
        int n = nums.length;
        int[] diffs = new int[n];
        for (int i = 0; i < n; i++) {
            int low = (i + 1) % n;
            int high = (i - nums[i] + n + 1) % n;
            diffs[low]++;
            diffs[high]--;
            if (low >= high) {
                diffs[0]++;
            }
        }
        int bestIndex = 0;
        int maxScore = 0;
        int score = 0;
        for (int i = 0; i < n; i++) {
            score += diffs[i];
            if (score > maxScore) {
                bestIndex = i;
                maxScore = score;
            }
        }
        return bestIndex;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
